//
//  Channel.swift
//  
//
//  Created on 07/05/2021
//


import Foundation

/// Object responsible for storing video data
public struct Channel: ChannelData, Identifiable {
    public init(name: String = "", id: String = "", url: String = "", banners: [Channel.Banner] = [], thumbnails: [Channel.Icon] = [], error: String? = nil, subCount: Int32 = 0, totalViews: Int64 = 0, joined: Int64 = 0, paid: Bool = false, autoGenerated: Bool = false, isFamilyFriendly: Bool = false, description: String = "", descriptionHtml: String = "", allowedRegions: [String] = [], latestVideos: [VideoPreview.ChannelVideo] = [], relatedChannels: [ChannelPreview.Related] = []) {
        self.name = name
        self.id = id
        self.url = url
        self.banners = banners
        self.thumbnails = thumbnails
        self.error = error
        self.subCount = subCount
        self.totalViews = totalViews
        self.joined = joined
        self.paid = paid
        self.autoGenerated = autoGenerated
        self.isFamilyFriendly = isFamilyFriendly
        self.description = description
        self.descriptionHtml = descriptionHtml
        self.allowedRegions = allowedRegions
        self.latestVideos = latestVideos
        self.relatedChannels = relatedChannels
    }
    
    
    /// Filter that dictates, how vidoes should be sorted
    public enum SortDescriptor {
        case newest
        case oldest
        case popular
        
        func toString() -> String {
            switch self {
                case .newest:
                    return "newest"
                case .oldest:
                    return "oldest"
                case .popular:
                    return "popular"
            }
        }
    }
    
    /// Object responsible for storing channel icon data
    public struct Icon {
        
        internal init(from thumbnail: InvidiousAuthorThumbnail) {
            self.url = thumbnail.url
            self.width = thumbnail.width
            self.height = thumbnail.height
        }
        
        public let url: String
        public let width: Int32
        public let height: Int32
    }
    
    /// Object responsible for storing channel banned data
    public struct Banner {
        
        internal init(from thumbnail: InvidiousAuthorBanner) {
            self.url = thumbnail.url
            self.width = thumbnail.width
            self.height = thumbnail.height
        }
        
        public let url: String
        public let width: Int32
        public let height: Int32
    }
    
    /// Initializes Video from JSON decoded response
    /// - Parameter channel: JSON decoded response from Invidious
    internal init(from channel: InvidiousChannel) {
        self.name = channel.author
        self.id = channel.authorId
        self.url = channel.authorUrl
        self.banners = channel.authorBanners.map { Banner(from: $0) }
        self.thumbnails = channel.authorThumbnails.map { Icon(from: $0) }
        self.error = channel.error
        
        self.subCount = channel.subCount
        self.totalViews = channel.totalViews
        self.joined = channel.joined
        
        self.paid = channel.paid ?? false
        self.autoGenerated = channel.autoGenerated
        self.isFamilyFriendly = channel.isFamilyFriendly
        self.description = channel.description
        self.descriptionHtml = channel.descriptionHtml
        self.allowedRegions = channel.allowedRegions
        
        self.latestVideos = channel.latestVideos.map { VideoPreview.ChannelVideo(from: $0) }
        self.relatedChannels = channel.relatedChannels.map { ChannelPreview.Related(from: $0) }
    }
    
    public let name: String
    public let id: String
    public let url: String
    public let banners: [Banner]
    public let thumbnails: [Icon]
    public let error: String?
    
    public let subCount: Int32
    public let totalViews: Int64
    public let joined: Int64
    
    public let paid: Bool
    public let autoGenerated: Bool
    public let isFamilyFriendly: Bool
    public let description: String
    public let descriptionHtml: String
    public let allowedRegions: [String]
    
    public let latestVideos: [VideoPreview.ChannelVideo]
    public let relatedChannels: [ChannelPreview.Related]
}
